# -*- coding: utf-8 -*-
"""Yolov3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BtrREn5HP05zU6UuP7Np75LMriMnvh4L
"""

!pip install opencv-python

import cv2
import matplotlib.pyplot as plt
import numpy as np

yolo = cv2.dnn.readNet("/content/yolov3.weights", "/content/yolov3.cfg")

classes = {}
with  open("/content/coco.names", "r") as f:
  classes = f.read().splitlines()

len(classes)

classes

d = cv2.imread("/content/2.jpg")
d.shape

img = cv2.imread('/content/2.jpg')
new_image = cv2.dnn.blobFromImage(img, 1/255, (320,320), (0,0,0), swapRB = True, crop = False)

new_image.shape

i = new_image.reshape(320,320,3)
plt.imshow(i)

width, height, ct = i.shape

yolo.setInput(new_image)

output_layer_names = yolo.getUnconnectedOutLayersNames()
layeroutput = yolo.forward(output_layer_names)

"""We need to detect what type of image and assign an id to it and also to check the confidence of the detected image"""

boxes = []
confidences = []
class_ids = []

for output in layeroutput:
  for detection in output:
    score = detection[5:]
    class_id = np.argmax(score)
    confidence = score[class_id]
    if confidence > 0.7:
      centre_x = int(detection[0]*width)
      centre_y = int(detection[0]*height)
      w = int(detection[0]*width)
      h = int(detection[0]*height)
      x = int(centre_x - w/2)
      y = int(centre_y - h/2)

      boxes.append([x,y,w,h])
      confidences.append(float(confidence))
      class_ids.append(class_id)

len(boxes)

"""As there is only one type of image given, so the boxes predicts only one

We need to put a bounding box across boxes
"""

indexes = cv2.dnn.NMSBoxes(boxes, confidences, 0.5,0.4)

font = cv2.FONT_HERSHEY_PLAIN
colors = np.random.uniform(0, 255, size = (len(boxes),3))

dog_img = cv2.imread("/content/27.jpg")
dog_img.shape

for i in indexes.flatten():
  x,y,w,h = boxes[i]

  label = str(classes[class_ids[i]])
  confi = str(round(confidences[i], 2))
  color = colors[i]

  cv2.rectangle(dog_img, (x,y), (x+w, y+h), color, 3)
  cv2.putText(dog_img, label + " " + confi, (x, y+60), font, 2, (255,255,255), 1)

plt.imshow(dog_img)

cv2.imwrite("./dog_imge.jpg", dog_img)

